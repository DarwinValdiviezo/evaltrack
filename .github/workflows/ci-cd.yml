name: EvalTrack v2.0.0 CI/CD Pipeline

on:
  push:
    branches: [ v2.0.0-nestjs-react, develop ]
    tags: [ 'v2.*' ]
  pull_request:
    branches: [ v2.0.0-nestjs-react ]

env:
  REGISTRY: docker.io
  IMAGE_NAME_BACKEND: darwinvaldiviezo/evaltrack-api
  IMAGE_NAME_FRONTEND: darwinvaldiviezo/evaltrack-frontend
  IMAGE_NAME_MIGRATION: darwinvaldiviezo/evaltrack-migration

jobs:
  # ========================================
  # JOB 1: VALIDACI√ìN DE C√ìDIGO (SIN NPM CI)
  # ========================================
  validate:
    name: üîç Validaci√≥n de C√≥digo
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout c√≥digo
        uses: actions/checkout@v4

      - name: üîç Validar sintaxis TypeScript Backend
        run: |
          cd backend
          npx tsc --noEmit --skipLibCheck

      - name: üîç Validar sintaxis TypeScript Frontend
        run: |
          cd frontend
          npx tsc --noEmit --skipLibCheck

      - name: üîç Validar estructura de archivos
        run: |
          echo "‚úÖ Validando estructura del proyecto..."
          test -f backend/package.json && echo "‚úÖ Backend package.json encontrado"
          test -f frontend/package.json && echo "‚úÖ Frontend package.json encontrado"
          test -f backend/Dockerfile && echo "‚úÖ Backend Dockerfile encontrado"
          test -f frontend/Dockerfile && echo "‚úÖ Frontend Dockerfile encontrado"
          test -f docker-compose.yml && echo "‚úÖ Docker Compose encontrado"

  # ========================================
  # JOB 2: BUILD Y PUSH DOCKER IMAGES
  # ========================================
  build-and-push:
    name: üê≥ Build y Push Docker Images
    needs: validate
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/v2.0.0-nestjs-react' || startsWith(github.ref, 'refs/tags/v2.'))
    
    steps:
      - name: üì• Checkout c√≥digo
        uses: actions/checkout@v4

      - name: üîê Login a Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: üìã Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ========================================
      # BACKEND IMAGE
      # ========================================
      - name: üèóÔ∏è Build Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      # ========================================
      # FRONTEND IMAGE
      # ========================================
      - name: üèóÔ∏è Build Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      # ========================================
      # MIGRATION IMAGE
      # ========================================
      - name: üèóÔ∏è Build Migration Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.migration
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_MIGRATION }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_MIGRATION }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_MIGRATION }}:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # ========================================
  # JOB 3: DEPLOY TO STAGING
  # ========================================
  deploy-staging:
    name: üöÄ Deploy a Staging
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/v2.0.0-nestjs-react'
    environment: staging
    
    steps:
      - name: üì• Checkout c√≥digo
        uses: actions/checkout@v4

      - name: üîê Configurar SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}

      - name: üöÄ Deploy a Staging
        run: |
          ssh ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
            cd /opt/evaltrack-staging
            echo "üîÑ Actualizando im√°genes..."
            docker-compose pull
            echo "üóÑÔ∏è Ejecutando migraciones..."
            docker-compose run --rm migration
            echo "üöÄ Reiniciando servicios..."
            docker-compose up -d
            echo "üè• Health check..."
            sleep 30
            curl -f http://localhost:3000/health || exit 1
            echo "‚úÖ Deploy a staging completado"
          EOF

      - name: üìä Smoke Tests Staging
        run: |
          curl -f http://${{ secrets.STAGING_HOST }}:3000/health
          curl -f http://${{ secrets.STAGING_HOST }}:5173/

      - name: üì¢ Notificar Slack - Staging
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: '‚úÖ EvalTrack v2.0.0 desplegado exitosamente en STAGING'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ========================================
  # JOB 4: DEPLOY TO PRODUCTION
  # ========================================
  deploy-production:
    name: üöÄ Deploy a Producci√≥n
    needs: [build-and-push, deploy-staging]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v2.')
    environment: production
    
    steps:
      - name: üì• Checkout c√≥digo
        uses: actions/checkout@v4

      - name: üîê Configurar SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PROD_SSH_KEY }}

      - name: üì¶ Backup de producci√≥n
        run: |
          ssh ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} << 'EOF'
            echo "üì¶ Creando backup..."
            cd /opt/evaltrack-prod
            ./scripts/backup.sh
          EOF

      - name: üîÑ Migraci√≥n de datos (si es necesario)
        run: |
          ssh ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} << 'EOF'
            echo "üîÑ Ejecutando migraci√≥n de datos..."
            cd /opt/evaltrack-prod
            ./scripts/migrate-data.sh
          EOF

      - name: üöÄ Deploy a Producci√≥n
        run: |
          ssh ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} << 'EOF'
            cd /opt/evaltrack-prod
            echo "üîÑ Actualizando im√°genes..."
            docker-compose pull
            echo "üóÑÔ∏è Ejecutando migraciones..."
            docker-compose run --rm migration
            echo "üöÄ Desplegando con estrategia Blue/Green..."
            ./scripts/deploy.sh ${{ github.ref_name }}
          EOF

      - name: üìä Health Check Producci√≥n
        run: |
          echo "üè• Verificando salud de la aplicaci√≥n..."
          for i in {1..10}; do
            if curl -f http://${{ secrets.PROD_HOST }}:3000/health; then
              echo "‚úÖ Backend saludable"
              break
            fi
            sleep 10
          done
          
          if curl -f http://${{ secrets.PROD_HOST }}:5173/; then
            echo "‚úÖ Frontend saludable"
          else
            echo "‚ùå Frontend no responde"
            exit 1
          fi

      - name: üìä Smoke Tests Producci√≥n
        run: |
          echo "üß™ Ejecutando smoke tests..."
          curl -X POST http://${{ secrets.PROD_HOST }}:3000/auth/login \
            -H "Content-Type: application/json" \
            -d '{"email":"admin@test.com","password":"admin123"}' \
            -w "\nStatus: %{http_code}\n"

      - name: üì¢ Notificar Slack - Producci√≥n
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: 'üéâ EvalTrack v2.0.0 desplegado exitosamente en PRODUCCI√ìN!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: üè∑Ô∏è Crear Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: EvalTrack v2.0.0 - Producci√≥n
          body: |
            ## üéâ EvalTrack v2.0.0 Desplegado en Producci√≥n
            
            ### ‚ú® Nuevas Caracter√≠sticas
            - Migraci√≥n completa desde Laravel a NestJS/React
            - Mejor performance y escalabilidad
            - Interfaz moderna con Tailwind CSS
            - API RESTful con TypeScript
            
            ### üîß Mejoras T√©cnicas
            - Backend: NestJS 11.0.1 + Prisma
            - Frontend: React 18 + Vite + TypeScript
            - Base de datos: PostgreSQL unificada
            - Autenticaci√≥n: JWT + Passport
            
            ### üìä M√©tricas de Despliegue
            - Tiempo de build: ${{ needs.build-and-push.outputs.build-time }}
            - Tests pasados: ‚úÖ
            - Health checks: ‚úÖ
            - Smoke tests: ‚úÖ
          draft: false
          prerelease: false

  # ========================================
  # JOB 5: ROLLBACK (en caso de fallo)
  # ========================================
  rollback:
    name: üîÑ Rollback Autom√°tico
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: failure() && startsWith(github.ref, 'refs/tags/v2.')
    environment: production
    
    steps:
      - name: üîê Configurar SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PROD_SSH_KEY }}

      - name: üîÑ Ejecutar Rollback
        run: |
          ssh ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} << 'EOF'
            echo "üîÑ Iniciando rollback autom√°tico..."
            cd /opt/evaltrack-prod
            ./scripts/rollback.sh
          EOF

      - name: üì¢ Notificar Rollback
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#incidents-prod'
          text: 'üö® ROLLBACK AUTOM√ÅTICO EJECUTADO - EvalTrack v2.0.0'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 