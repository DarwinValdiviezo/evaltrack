# ========================================
# DOCKER COMPOSE PARA PRODUCCIÓN
# ========================================

version: '3.8'

services:
  # ========================================
  # API NestJS
  # ========================================
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: nestjs-api:${VERSION:-latest}
    container_name: nestjs-api-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    env_file:
      - prod.env
    environment:
      - NODE_ENV=production
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network
    volumes:
      - ./logs:/app/logs
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ========================================
  # Base de Datos PostgreSQL
  # ========================================
  postgres:
    image: postgres:15-alpine
    container_name: postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-nestjs_db}
      POSTGRES_USER: ${DB_USER:-nestjs_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-nestjs_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-nestjs_user} -d ${DB_NAME:-nestjs_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # ========================================
  # Redis (Opcional - para cache)
  # ========================================
  # redis:
  #   image: redis:7-alpine
  #   container_name: redis-prod
  #   restart: unless-stopped
  #   command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
  #   volumes:
  #     - redis_data:/data
  #   ports:
  #     - "6379:6379"
  #   networks:
  #     - app-network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
  #     interval: 10s
  #     timeout: 3s
  #     retries: 5

  # ========================================
  # Nginx (Opcional - como reverse proxy)
  # ========================================
  # nginx:
  #   image: nginx:alpine
  #   container_name: nginx-prod
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./ssl:/etc/nginx/ssl:ro
  #   depends_on:
  #     - api
  #   networks:
  #     - app-network

  # ========================================
  # Prometheus (Opcional - para métricas)
  # ========================================
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus-prod
  #   restart: unless-stopped
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--storage.tsdb.retention.time=200h'
  #     - '--web.enable-lifecycle'
  #   networks:
  #     - app-network

  # ========================================
  # Grafana (Opcional - para dashboards)
  # ========================================
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana-prod
  #   restart: unless-stopped
  #   ports:
  #     - "3001:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   depends_on:
  #     - prometheus
  #   networks:
  #     - app-network

# ========================================
# Volúmenes
# ========================================
volumes:
  postgres_data:
    driver: local
  # redis_data:
  #   driver: local
  # prometheus_data:
  #   driver: local
  # grafana_data:
  #   driver: local

# ========================================
# Redes
# ========================================
networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 